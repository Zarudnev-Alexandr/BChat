from fastapi import APIRouter, Depends, HTTPException, Query
from enum import Enum

from src.db import BootcampRolesEnum

from src.schemas import (
    BootcampCreate,
    BootcampBase
  )

from src.utils import (
    get_current_user,
    get_bootcamps,
    add_bootcamp,
    add_bootcamp_role,
    get_bootcamp,
    check_bootcamp_membership,
    remove_bootcamp,
    remove_bootcamp_role,
    get_bootcamp_applications,
    get_bootcamp_application_by_id,
    get_bootcamp_members
)


bootcamps_router: APIRouter = APIRouter()

@bootcamps_router.get('/', response_model=list[BootcampBase])
async def get_bootcamps_func(
  user_longitude: float,
  user_latitude: float,
  limit: int = Query(default=20, ge=1, le=100), 
  offset: int = Query(default=0, ge=0),
  current_user: dict = Depends(get_current_user)
):
  """–í—Å–µ –±—É—Ç–∫–µ–º–ø—ã"""

  offset = offset * limit

  bootcamps = await get_bootcamps(current_user["session"], user_longitude, user_latitude, limit, offset)

  if not bootcamps:
    raise HTTPException(status_code=404, detail=f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –±—É—Ç–∫–µ–º–ø–æ–≤üò¢")
  
  return bootcamps


@bootcamps_router.post('/')
async def add_bootcamps_func(
  bootcamp: BootcampCreate, current_user: dict = Depends(get_current_user)
):
  """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—É—Ç–∫–µ–º–ø–∞"""

  bootcamp = {
    "address": bootcamp.address,
    "geoposition_longitude": bootcamp.geoposition_longitude,
    "geoposition_latitude": bootcamp.geoposition_latitude,
    "start_time": bootcamp.start_time,
    "end_time": bootcamp.end_time,
    "budget": bootcamp.budget,
    "members_count": bootcamp.members_count,
    "description": bootcamp.description
  }

  try:
    bootcampAdd = await add_bootcamp(current_user["session"], **bootcamp)
    if bootcampAdd:
      bootcamp_role = {
        "role": BootcampRolesEnum.admin,
        "text": "—Å–æ–∑–¥–∞–Ω–æ –∞–¥–º–∏–Ω–æ–º",
        "bootcamp_id": bootcampAdd.id,
        "user_id": current_user["id"]
      }
      role = await add_bootcamp_role(current_user["session"], **bootcamp_role)

      result = [bootcampAdd, role]
      return result
  except Exception as e:
    print(e)
    await current_user["session"].rollback()


@bootcamps_router.delete('/{bootcamp_id}/')
async def delete_bootcamp_func(
  bootcamp_id: int, current_user: dict = Depends(get_current_user)
):
  """–£–¥–∞–ª–µ–Ω–∏–µ –±—É—Ç–∫–µ–º–ø–∞"""

  bootcamp = await get_bootcamp(current_user["session"], bootcamp_id)
  bootcamp_member_is_admin = await check_bootcamp_membership(current_user["session"], current_user["id"], bootcamp_id)

  if not bootcamp:
    raise HTTPException(status_code=404, detail=f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –±—É—Ç–∫–µ–º–ø–∞ —Å id {bootcamp_id}")
  
  if not bootcamp_member_is_admin:
    raise HTTPException(status_code=400, detail=f"–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –∫ —ç—Ç–æ–º—É –±—É—Ç–∫–µ–º–ø—É –Ω–∏–∫–∞–∫–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è")
  
  if bootcamp_member_is_admin.role != BootcampRolesEnum.admin:
    raise HTTPException(status_code=403, detail=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {current_user['id']} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –±—É—Ç–∫–µ–º–ø–∞ —Å id {bootcamp_id}")
  
  try:
    await remove_bootcamp_role(current_user["session"], bootcamp_id)
    result = await remove_bootcamp(current_user["session"], bootcamp_id)
    if result:
      return {"message": f"–ë—É—Ç–∫–µ–º–ø —Å id {bootcamp_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Å id {current_user['id']}"}
  except:
    raise HTTPException(status_code=404, detail=f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±—É—Ç–∫–µ–º–øüò¢")
  

@bootcamps_router.post('/{bootcamp_id}/apply/')
async def add_bootcamp_apply_func(
  bootcamp_id: int, 
  text: str, 
  current_user: dict = Depends(get_current_user)
):
  """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –±—É—Ç–∫–µ–º–ø"""

  bootcamp = await get_bootcamp(current_user["session"], bootcamp_id)
  bootcamp_member = await check_bootcamp_membership(current_user["session"], current_user["id"], bootcamp_id)

  if not bootcamp:
    raise HTTPException(status_code=404, detail=f"–ë—É—Ç–∫–µ–º–ø–∞ —Å id {bootcamp_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Çüò¢")
  
  if bootcamp_member:
    if bootcamp_member.role == BootcampRolesEnum.admin:
      raise HTTPException(status_code=400, detail=f"–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º –±—É—Ç–∫–µ–º–ø–∞ —Å id {bootcamp_id}üòé")
    
    if bootcamp_member.role == BootcampRolesEnum.member:
      raise HTTPException(status_code=400, detail=f"–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –±—É—Ç–∫–µ–º–ø–∞ —Å id {bootcamp_id}üî•")
    
    if bootcamp_member.role == BootcampRolesEnum.wating:
      raise HTTPException(status_code=400, detail=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –±—É—Ç–∫–µ–º–ø–µ —Å id {bootcamp_id} –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏‚åõ")
    
    if bootcamp_member.role == BootcampRolesEnum.rejected:
      raise HTTPException(status_code=400, detail=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –±—É—Ç–∫–µ–º–ø–µ —Å id {bootcamp_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞üò≠")
  
  bootcamp_role = {
      "role": BootcampRolesEnum.wating,
      "text": text,
      "bootcamp_id":bootcamp_id,
      "user_id": current_user["id"]
    }
  role = await add_bootcamp_role(current_user["session"], **bootcamp_role)
  return role


@bootcamps_router.get('/{bootcamp_id}/applications/')
async def get_bootcamp_applications_func(
  bootcamp_id: int,
  current_user: dict = Depends(get_current_user)
):
  """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ –Ω–∞ –±—É—Ç–∫–µ–º–ø"""

  bootcamp = await get_bootcamp(current_user["session"], bootcamp_id)
  bootcamp_member_is_admin = await check_bootcamp_membership(current_user["session"], current_user["id"], bootcamp_id)
  bootcamp_applications = await get_bootcamp_applications(current_user["session"], bootcamp_id)

  if not bootcamp:
    raise HTTPException(status_code=404, detail=f"–ë—É—Ç–∫–µ–º–ø–∞ —Å id {bootcamp_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç‚ùå")
  
  if not bootcamp_member_is_admin:
    raise HTTPException(status_code=400, detail=f"–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –∫ —ç—Ç–æ–º—É –±—É—Ç–∫–µ–º–ø—É –Ω–∏–∫–∞–∫–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è")
  
  if bootcamp_member_is_admin.role != BootcampRolesEnum.admin:
    raise HTTPException(status_code=403, detail=f"–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º –±—É—Ç–∫–µ–º–ø–∞ —Å id {bootcamp_id}üíÄ")
  
  if not bootcamp_applications:
    raise HTTPException(status_code=404, detail=f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –±—É—Ç–∫–µ–º–ø —Å id {bootcamp_id}üôÑ")
  
  return bootcamp_applications


class BootcampChangeRolesEnum(str, Enum):
    member = "—É—á–∞—Å—Ç–Ω–∏–∫"
    rejected = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"

@bootcamps_router.put('/{bootcamp_id}/applications/{application_id}/')
async def edit_bootcamp_applications_func(
  bootcamp_id: int,
  application_id: int,
  status: BootcampChangeRolesEnum,
  current_user: dict = Depends(get_current_user)
):
  """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ (–æ–¥–æ–±—Ä–∏—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å)"""

  bootcamp = await get_bootcamp(current_user["session"], bootcamp_id)
  bootcamp_member_is_admin = await check_bootcamp_membership(current_user["session"], current_user["id"], bootcamp_id)
  bootcamp_application = await get_bootcamp_application_by_id(current_user["session"], application_id)

  if not bootcamp:
    raise HTTPException(status_code=404, detail=f"–ë—É—Ç–∫–µ–º–ø–∞ —Å id {bootcamp_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç‚ùå")
  
  if not bootcamp_member_is_admin:
    raise HTTPException(status_code=400, detail=f"–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –∫ —ç—Ç–æ–º—É –±—É—Ç–∫–µ–º–ø—É –Ω–∏–∫–∞–∫–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è")
  
  if bootcamp_member_is_admin.role != BootcampRolesEnum.admin:
    raise HTTPException(status_code=403, detail=f"–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º –±—É—Ç–∫–µ–º–ø–∞ —Å id {bootcamp_id}üíÄ")
  
  if not bootcamp_application:
    raise HTTPException(status_code=404, detail=f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–∫–∏ —Å id {application_id}üò±")
  
  try:
    bootcamp_application.role = status
    await current_user["session"].commit()
    return bootcamp_application

  except Exception as e:      
    raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
  

@bootcamps_router.get('/{bootcamp_id}/members/')
async def get_bootcamp_members_func(
  bootcamp_id: int,
  current_user: dict = Depends(get_current_user)
):
  """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—É—Ç–∫–µ–º–ø–∞"""

  bootcamp = await get_bootcamp(current_user["session"], bootcamp_id)
  bootcamp_status = await check_bootcamp_membership(current_user["session"], current_user["id"], bootcamp_id)
  bootcamp_members = await get_bootcamp_members(current_user["session"], bootcamp_id)

  if not bootcamp:
    raise HTTPException(status_code=404, detail=f"–ë—É—Ç–∫–µ–º–ø–∞ —Å id {bootcamp_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç‚ùå")
  
  if not bootcamp_status:
    raise HTTPException(status_code=400, detail=f"–í—ã –Ω–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –±—É—Ç–∫–µ–º–ø–µ —Å id {bootcamp_id}")
  
  if bootcamp_status.role == BootcampRolesEnum.wating:
    raise HTTPException(status_code=403, detail=f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—É—Ç–∫–µ–º–ø–∞, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—Å–µ –µ—â–µ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è")
  
  if bootcamp_status.role == BootcampRolesEnum.rejected:
    raise HTTPException(status_code=403, detail=f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—É—Ç–∫–µ–º–ø–∞, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
  
  return bootcamp_members